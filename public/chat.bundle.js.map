{"version":3,"sources":["webpack:///./tailwind.config.js","webpack:///./client/components/input/index.jsx","webpack:///./client/assets/images/undraw_messaging_app.svg","webpack:///./client/routes/chat/chat-content/content-loading.module.css","webpack:///./client/assets/images/undraw_lost.svg","webpack:///./client/routes/legal/terms.jsx","webpack:///./client/routes/chat/appBar/settings.jsx","webpack:///./client/routes/chat/reducer.js","webpack:///./client/routes/chat/chat-content/MessageTextArea.jsx","webpack:///./client/icons/EmotionHappyIcon.jsx","webpack:///./client/components/popup-menu/index.jsx","webpack:///./client/routes/chat/chat-content/MessageInputArea.jsx","webpack:///./client/routes/chat/chat-content/ChatMessage.jsx","webpack:///./client/routes/chat/chat-content/ContentContainer.jsx","webpack:///./client/routes/chat/chat-content/ContentNoChannel.jsx","webpack:///./client/routes/chat/chat-content/ContentLoading.jsx","webpack:///./client/routes/chat/chat-content/ContentError.jsx","webpack:///./client/icons/ChatIcon.jsx","webpack:///./client/routes/chat/chat-content/ChatContent.jsx","webpack:///./client/routes/chat/sidebar/SidebarChannelButton.jsx","webpack:///./client/components/modal/index.jsx","webpack:///./client/routes/chat/sidebar/NewChannelModal.jsx","webpack:///./client/icons/PlusIcon.jsx","webpack:///./client/routes/chat/sidebar/ChatChannelSidebar.jsx","webpack:///./client/routes/chat/appBar/tabs.jsx","webpack:///./client/routes/chat/appBar/drawer.jsx","webpack:///./client/routes/chat/appBar/appBar.jsx","webpack:///./client/routes/treeView/data.jsx","webpack:///./client/routes/treeView/treeView.jsx","webpack:///./client/routes/treeView/floatingActionButton.jsx","webpack:///./client/routes/chat/index.jsx","webpack:///./client/hooks/useEffectOnce.js","webpack:///./client/components/button/index.jsx","webpack:///./utils.js"],"names":["module","exports","variants","textColor","backgroundColor","theme","extend","fontFamily","display","screens","sm","min","max","md","lg","xl","height","classes","join","Input","React","forwardRef","className","rest","ref","propTypes","PropTypes","string","defaultProps","Terms","useStyles","makeStyles","root","flexGrow","padding","spacing","paper","title","paddingLeft","listItem","nested","back","color","logOut","textAlign","Settings","history","useHistory","accountSettingsOpen","setAccountSettingsOpen","useState","chatSettingsOpen","setChatSettingsOpen","viewSettingsOpen","setViewSettingsOpen","user","setUser","useContext","UserContext","onSignOut","useCallback","push","container","item","xs","elevation","edge","button","aria-label","onClick","username","email","primary","in","timeout","unmountOnExit","component","disablePadding","fullWidth","variant","submit","ChatContext","createContext","init","state","socket","io","channels","whoIsTyping","chatMessages","typingTimeout","undefined","currentChannel","isTyping","contentShouldScrollDown","channelFetchError","performEffect","dispatch","type","chatReducer","prev","action","prevState","produce","draft","payload","axios","get","then","response","data","chatChannels","catch","Object","assign","message","_id","channel","clearTimeout","emit","channelId","setTimeout","chatMessage","index","indexOf","splice","textareaStyle","maxHeight","MessageTextArea","messageInputRef","handleSubmit","event","preventDefault","current","value","trim","handleMessageKeyDown","key","shiftKey","handleMessageChange","useEffect","inputElem","style","scrollHeight","onSubmit","htmlFor","id","rows","placeholder","onChange","onKeyDown","autoComplete","oneOfType","func","shape","any","createRef","memo","EmotionHappyIcon","props","viewBox","width","d","PopupMenu","bgClassName","children","onClose","isOpen","useEffectOnce","handleEscapeKey","document","addEventListener","removeEventListener","tabIndex","node","bool","R","emojiMenuOpen","setEmojiMenuOpen","useRef","handleBackgroundClick","handleEmojiMenuButton","handleEmojiClick","emoji","native","displayWhoIsTyping","useMemo","length","person","users","uuidv4","set","onSelect","colors","blue","ChatMessage","isSafeToUpdate","whenMessageWasSent","setWhenMessageWasSent","shouldRecalculateTime","setShouldRecalculateTime","recalculateTimeInAMinute","sent","DateTime","fromISO","minutesSinceSend","local","diff","toObject","minutes","toRelative","toLocaleString","DATETIME_MED","dateTime","isRequired","ContentContainer","direction","ContentNoChannel","ContentLoading","styles","spinner","ContentError","alt","src","channelErrorImage","ChatIcon","channelData","setChannelData","chatMessagesRef","scrollTop","chatChannel","Error","name","messages","map","SidebarChannelButton","groupType","changeChannel","fetchingChannel","number","Modal","NewChannelModal","form","useForm","handleNewChannelSubmit","post","headers","Authorization","token","setValue","clearError","handleRequestValidationError","register","required","errors","overrideColors","PlusIcon","ChatChannelSidebar","newChannelMenuOpen","setNewChannelMenuOpen","userMenuOpen","setUserMenuOpen","handleNewChannelMenuClick","arrayOf","position","borderRadius","TabView","setGroupType","Paper","Tabs","newValue","indicatorColor","centered","Tab","label","list","marginTop","drawer","flexShrink","avatar","SideDrawer","drawerOpen","setDrawerOpen","Fragment","Drawer","anchor","open","List","ListItem","ListItemAvatar","Avatar","ListItemText","toolbar","breakpoints","down","alignSelf","up","marginRight","appBar","zIndex","AppBarView","AppBar","Toolbar","Typography","IconButton","TreeItems","blockName","parentButton","fontSize","marginLeft","marginBottom","border","lineHeight","borderColor","childButton","minWidth","maxWidth","margin","treeViewContainer","TreeView","setTreeViewVisible","parent","setParent","backTrackArray","updateBackTrackArray","Button","pop","child","find","temp","onChildClick","bottom","right","left","FAB","treeViewVisible","Fab","Chat","useReducer","on","close","bind","replace","chatContextValue","Provider","fn","classVariants","oneOf","validationResult","require","resolveConfig","tailwindConfig","hasProps","curry","obj","compose","all","identity","values","pickAll","error","paramErrors","forEachObjIndexed","setError","msg","inspect","x","console","log","handleValidation","req","res","next","isEmpty","status","json","mapped"],"mappings":"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","file":"chat.bundle.js","sourcesContent":["module.exports = {\n  // example from: https://tailwindcss.com/docs/configuring-variants/\n  variants: {\n    textColor: [\"responsive\", \"hover\", \"focus\", \"group-hover\"],\n    backgroundColor: [\"responsive\", \"hover\", \"focus\", \"group-hover\"],\n  },\n  theme: {\n    extend: {\n      fontFamily: {\n        display: [\"Raleway\", \"sans-serif\"],\n      },\n      screens: {\n        sm: { min: \"640px\", max: \"767px\" },\n        md: { min: \"768px\", max: \"1023px\" },\n        lg: { min: \"1024px\", max: \"1279px\" },\n        xl: { min: \"1280px\", max: \"1535px\" },\n      },\n      height: (theme) => ({\n        \"screen/2\": \"50vh\",\n        \"screen/4\": \"25vh\",\n        \"screen-80\": \"80vh\",\n        \"screen-85\": \"85vh\",\n      }),\n    },\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst classes = [\n  'rounded-lg',\n  'bg-gray-200',\n  'px-3',\n  'py-2',\n  'border',\n  'border-solid',\n  'border-transparent',\n  'outline-none',\n].join(' ');\nconst focused = 'focus:bg-white focus:border-gray-400';\nconst hovered = 'hover:border-gray-400';\n\nconst Input = React.forwardRef(({ className, ...rest }, ref) => (\n  <input\n    className={`${classes} ${hovered} ${focused} ${className}`}\n    ref={ref}\n    {...rest}\n  />\n));\n\nInput.propTypes = {\n  className: PropTypes.string,\n};\n\nInput.defaultProps = {\n  className: '',\n};\n\nexport default Input;\n","module.exports = __webpack_public_path__ + \"0ce16bb678d46f2fa7ee900a836cdc8e.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner-parent\":\"_1bXKkmuCyRlq5K6H1MN-3a\",\"spinner\":\"_1d-XUURtq_Usrxlm7jbYcI\",\"spin\":\"_28jbo546yynUOWDADfDkZ3\"};","module.exports = __webpack_public_path__ + \"ba4e5306b2a697394104eb080eac80c9.svg\";","import React from \"react\";\n\nconst Terms = () => {\n  return (\n    <div>\n      CO-convo-EP Terms & Privacy Policy CO-convo-EP is designed to never\n      collect or store any sensitive information. CO-convo-EP messages and calls\n      cannot be accessed by us or other third parties because they are always\n      end-to-end encrypted, private, and secure. Our Terms of Service and\n      Privacy Policy are available below.\n      <br />\n      Terms of Service Privacy Policy Terms of Service CO-convo-EP Messenger\n      LLC. (“Signal”) utilizes state-of-the-art security and end-to-end\n      encryption to provide private messaging, Internet calling, and other\n      services to users worldwide. You agree to our Terms of Service (“Terms”)\n      by installing or using our apps, services, or website (together,\n      “Services”).\n      <br />\n      About our services Minimum Age. You must be at least 13 years old to use\n      our Services. The minimum age to use our Services without parental\n      approval may be higher in your home country.\n      <br />\n      Account Registration. To create an account you must register for our\n      Services using your phone number. You agree to receive text messages and\n      phone calls (from us or our third-party providers) with verification codes\n      to register for our Services.\n      <br />\n      Privacy of user data. CO-convo-EP does not sell, rent or monetize your\n      personal data or content in any way – ever.\n      <br />\n      Please read our Privacy Policy to understand how we safeguard the\n      information you provide when using our Services. For the purpose of\n      operating our Services, you agree to our data practices as described in\n      our Privacy Policy, as well as the transfer of your encrypted information\n      and metadata to the United States and other countries where we have or use\n      facilities, service providers or partners. Examples would be Third Party\n      Providers sending you a verification code and processing your support\n      tickets.\n      <br />\n      Software. In order to enable new features and enhanced functionality, you\n      consent to downloading and installing updates to our Services.\n      <br />\n      Fees and Taxes. You are responsible for data and mobile carrier fees and\n      taxes associated with the devices on which you use our Services.\n      <br />\n      Using CO-convo-EP Our Terms and Policies. You must use our Services\n      according to our Terms and posted policies. If we disable your account for\n      a violation of our Terms, you will not create another account without our\n      permission.\n      <br />\n      Legal and Acceptable Use. You agree to use our Services only for legal,\n      authorized, and acceptable purposes. You will not use (or assist others in\n      using) our Services in ways that: (a) violate or infringe the rights of\n      CO-convo-EP, our users, or others, including privacy, publicity,\n      intellectual property, or other proprietary rights; (b) involve sending\n      illegal or impermissible communications such as bulk messaging,\n      auto-messaging, and auto-dialing.\n      <br />\n      Harm to CO-convo-EP. You must not (or assist others to) access, use,\n      modify, distribute, transfer, or exploit our Services in unauthorized\n      manners, or in ways that harm CO-convo-EP, our Services, or systems. For\n      example you must not (a) gain or try to gain unauthorized access to our\n      Services or systems; (b) disrupt the integrity or performance of our\n      Services; (c) create accounts for our Services through unauthorized or\n      automated means; (d) collect information about our users in any\n      unauthorized manner; or (e) sell, rent, or charge for our Services.\n      <br />\n      Keeping Your Account Secure. CO-convo-EP embraces privacy by design and\n      does not have the ability to access your messages. You are responsible for\n      keeping your device and your CO-convo-EP account safe and secure. If you\n      lose your phone, follow the steps on our Support site to re-register for\n      our Services. When you register with a new device, your old device will\n      stop receiving all messages and calls.\n      <br />\n      No Access to Emergency Services. Our Services do not provide access to\n      emergency service providers like the police, fire department, hospitals,\n      or other public safety organizations. Make sure you can contact emergency\n      service providers through a mobile, fixed-line telephone, or other\n      service.\n      <br />\n      Third-party services. Our Services may allow you to access, use, or\n      interact with third-party websites, apps, content, and other products and\n      services. When you use third-party services, their terms and privacy\n      policies govern your use of those services.\n      <br />\n      Your Rights and License with CO-convo-EP Your Rights. You own the\n      information you submit through our Services. You must have the rights to\n      the phone number you use to sign up for your CO-convo-EP account.\n      <br />\n      Signal’s Rights. We own all copyrights, trademarks, domains, logos, trade\n      dress, trade secrets, patents, and other intellectual property rights\n      associated with our Services. You may not use our copyrights, trademarks,\n      domains, logos, trade dress, patents, and other intellectual property\n      rights unless you have our written permission. To report copyright,\n      trademark, or other intellectual property infringement, please contact\n      abuse@signal.org.\n      <br />\n      Signal’s License to You. CO-convo-EP grants you a limited, revocable,\n      non-exclusive, and non-transferable license to use our Services in\n      accordance with these Terms.\n      <br />\n      Disclaimers and Limitations Disclaimers. YOU USE OUR SERVICES AT YOUR OWN\n      RISK AND SUBJECT TO THE FOLLOWING DISCLAIMERS. WE PROVIDE OUR SERVICES ON\n      AN “AS IS” BASIS WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n      NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\n      PURPOSE, TITLE, NON-INFRINGEMENT, AND FREEDOM FROM COMPUTER VIRUS OR OTHER\n      HARMFUL CODE. SIGNAL DOES NOT WARRANT THAT ANY INFORMATION PROVIDED BY US\n      IS ACCURATE, COMPLETE, OR USEFUL, THAT OUR SERVICES WILL BE OPERATIONAL,\n      ERROR-FREE, SECURE, OR SAFE, OR THAT OUR SERVICES WILL FUNCTION WITHOUT\n      DISRUPTIONS, DELAYS, OR IMPERFECTIONS. WE DO NOT CONTROL, AND ARE NOT\n      RESPONSIBLE FOR, CONTROLLING HOW OR WHEN OUR USERS USE OUR SERVICES. WE\n      ARE NOT RESPONSIBLE FOR THE ACTIONS OR INFORMATION (INCLUDING CONTENT) OF\n      OUR USERS OR OTHER THIRD PARTIES. YOU RELEASE US, AFFILIATES, DIRECTORS,\n      OFFICERS, EMPLOYEES, PARTNERS, AND AGENTS (TOGETHER, “SIGNAL PARTIES”)\n      FROM ANY CLAIM, COMPLAINT, CAUSE OF ACTION, CONTROVERSY, OR DISPUTE\n      (TOGETHER, “CLAIM”) AND DAMAGES, KNOWN AND UNKNOWN, RELATING TO, ARISING\n      OUT OF, OR IN ANY WAY CONNECTED WITH ANY SUCH CLAIM YOU HAVE AGAINST ANY\n      THIRD PARTIES.\n      <br />\n      Limitation of liability. THE SIGNAL PARTIES WILL NOT BE LIABLE TO YOU FOR\n      ANY LOST PROFITS OR CONSEQUENTIAL, SPECIAL, PUNITIVE, INDIRECT, OR\n      INCIDENTAL DAMAGES RELATING TO, ARISING OUT OF, OR IN ANY WAY IN\n      CONNECTION WITH OUR TERMS, US, OR OUR SERVICES, EVEN IF THE SIGNAL PARTIES\n      HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. OUR AGGREGATE\n      LIABILITY RELATING TO, ARISING OUT OF, OR IN ANY WAY IN CONNECTION WITH\n      OUR TERMS, US, OR OUR SERVICES WILL NOT EXCEED ONE HUNDRED DOLLARS ($100).\n      THE FOREGOING DISCLAIMER OF CERTAIN DAMAGES AND LIMITATION OF LIABILITY\n      WILL APPLY TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW. THE LAWS OF\n      SOME STATES OR JURISDICTIONS MAY NOT ALLOW THE EXCLUSION OR LIMITATION OF\n      CERTAIN DAMAGES, SO SOME OR ALL OF THE EXCLUSIONS AND LIMITATIONS SET\n      FORTH ABOVE MAY NOT APPLY TO YOU. NOTWITHSTANDING ANYTHING TO THE CONTRARY\n      IN OUR TERMS, IN SUCH CASES, THE LIABILITY OF THE SIGNAL PARTIES WILL BE\n      LIMITED TO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW.\n      <br />\n      Availability of Our Services. Our Services may be interrupted, including\n      for maintenance, upgrades, or network or equipment failures. We may\n      discontinue some or all of our Services, including certain features and\n      the support for certain devices and platforms, at any time.\n      <br />\n      Resolving Disputes and Ending Terms Resolving disputes. You agree to\n      resolve any Claim you have with us relating to or arising out of our\n      Terms, us, or our Services exclusively in the United States District Court\n      for the Northern District of California or a state court in San Mateo\n      County, California. You also agree to submit to the personal jurisdiction\n      of such courts for the purpose of litigating all such disputes. The laws\n      of the State of California govern our Terms, as well as any disputes,\n      whether in court or arbitration, which might arise between CO-convo-EP and\n      you, without regard to conflict of law provisions.\n      <br />\n      Ending these Terms. You may end these Terms with CO-convo-EP at any time\n      by deleting CO-convo-EP Messenger from your device and discontinuing use\n      of our Services. We may modify, suspend, or terminate your access to or\n      use of our Services anytime for any reason, such as if you violate the\n      letter or spirit of our Terms or create harm, risk, or possible legal\n      exposure for CO-convo-EP. The following provisions will survive\n      termination of your relationship with CO-convo-EP: “Licenses,”\n      “Disclaimers,” “Limitation of Liability,” “Resolving dispute,”\n      “Availability” and “Ending these Terms,” and “General”.\n      <br />\n      General CO-convo-EP may update the Terms from time to time. When we update\n      our Terms, we will update the “Last Modified” date associated with the\n      updated Terms. Your continued use of our Services confirms your acceptance\n      of our updated Terms and supersedes any prior Terms. You will comply with\n      all applicable export control and trade sanctions laws. Our Terms cover\n      the entire agreement between you and CO-convo-EP regarding our Services.\n      If you do not agree with our Terms, you should stop using our Services.\n      <br />\n      If we fail to enforce any of our Terms, that does not mean we waive the\n      right to enforce them. If any provision of the Terms is deemed unlawful,\n      void, or unenforceable, that provision shall be deemed severable from our\n      Terms and shall not affect the enforceability of the remaining provisions.\n      Our Services are not intended for distribution to or use in any country\n      where such distribution or use would violate local law or would subject us\n      to any regulations in another country. We reserve the right to limit our\n      Services in any country. If you have specific questions about these Terms,\n      please contact us at privacy@signal.org.\n      <br />\n      Privacy Policy CO-convo-EP utilizes state-of-the-art security and\n      end-to-end encryption to provide private messaging and Internet calling\n      services to users worldwide (“Services”). Your calls and messages are\n      always encrypted, so they can never be shared or viewed by anyone but\n      yourself and the intended recipients.\n      <br />\n      Information you provide Account Information. You register a phone number\n      when you create a CO-convo-EP account. Phone numbers are used to provide\n      our Services to you and other CO-convo-EP users. You may optionally add\n      other information to your account, such as a profile name and profile\n      picture. This information is end-to-end encrypted.\n      <br />\n      Messages. CO-convo-EP cannot decrypt or otherwise access the content of\n      your messages or calls. CO-convo-EP queues end-to-end encrypted messages\n      on its servers for delivery to devices that are temporarily offline (e.g.\n      a phone whose battery has died). Your message history is stored on your\n      own devices.\n      <br />\n      Additional technical information is stored on our servers, including\n      randomly generated authentication tokens, keys, push tokens, and other\n      material that is necessary to establish calls and transmit messages.\n      CO-convo-EP limits this additional technical information to the minimum\n      required to operate the Services.\n      <br />\n      Contacts. CO-convo-EP can optionally discover which contacts in your\n      address book are CO-convo-EP users, using a service designed to protect\n      the privacy of your contacts. Information from the contacts on your device\n      may be cryptographically hashed and transmitted to the server in order to\n      determine which of your contacts are registered.\n      <br />\n      User Support. If you contact CO-convo-EP User Support, any personal data\n      you may share with us is kept only for the purposes of researching the\n      issue and contacting you about your case.\n      <br />\n      Managing your information. You can manage your personal information in\n      Signal’s application Settings. For example, you can update your profile\n      information or choose to enable additional privacy features like a\n      Registration Lock PIN.\n      <br />\n      Information we may share Third Parties. We work with third parties to\n      provide some of our Services. For example, our Third-Party Providers send\n      a verification code to your phone number when you register for our\n      Services. These providers are bound by their Privacy Policies to safeguard\n      that information. If you use other Third-Party Services like YouTube,\n      Spotify, Giphy, etc. in connection with our Services, their Terms and\n      Privacy Policies govern your use of those services.\n      <br />\n      Other instances where CO-convo-EP may need to share your data\n      <br />\n      To meet any applicable law, regulation, legal process or enforceable\n      governmental request. To enforce applicable Terms, including investigation\n      of potential violations. To detect, prevent, or otherwise address fraud,\n      security, or technical issues. To protect against harm to the rights,\n      property, or safety of CO-convo-EP, our users, or the public as required\n      or permitted by law. Updates We will update this privacy policy as needed\n      so that it is current, accurate, and as clear as possible. Your continued\n      use of our Services confirms your acceptance of our updated Privacy\n      Policy.\n      <br />\n      Terms Please also read our Terms which also governs the terms of this\n      Privacy Policy. Contact Us 1) Prajjwal Datir 2) Ganesh Gitte 3) Aditi\n      Medhane\n    </div>\n  );\n};\n\nexport default Terms;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport AccountIcon from \"@material-ui/icons/AccountBox\";\nimport ChatIcon from \"@material-ui/icons/ChatBubble\";\nimport ViewIcon from \"@material-ui/icons/ViewAgenda\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport BackButton from \"@material-ui/icons/ArrowBack\";\nimport { Link } from \"react-router-dom\";\nimport { Button, IconButton } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport { UserContext } from \"#/Provider\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: theme.spacing(2),\n  },\n  paper: {\n    padding: theme.spacing(2),\n  },\n  title: {\n    paddingLeft: 20,\n  },\n  listItem: {\n    padding: theme.spacing(3),\n  },\n  nested: {\n    paddingLeft: theme.spacing(12),\n  },\n  back: {\n    color: \"black\",\n  },\n  logOut: {\n    textAlign: \"center\",\n  },\n}));\n\nexport default function Settings() {\n  const history = useHistory();\n  const classes = useStyles();\n  const [accountSettingsOpen, setAccountSettingsOpen] = useState(false);\n  const [chatSettingsOpen, setChatSettingsOpen] = useState(false);\n  const [viewSettingsOpen, setViewSettingsOpen] = useState(false);\n\n  const [user, setUser] = React.useContext(UserContext);\n\n  const handleAccountSettingsClick = () => {\n    setAccountSettingsOpen(!accountSettingsOpen);\n  };\n  const handleChatSettingsClick = () => {\n    setChatSettingsOpen(!chatSettingsOpen);\n  };\n\n  const handleViewSettingsClick = () => {\n    setViewSettingsOpen(!viewSettingsOpen);\n  };\n\n  const onBackClick = () => {\n    history.push(\"/chat\");\n  };\n\n  // remove user from localStorage and go to homepage\n  const onSignOut = React.useCallback(() => {\n    setUser(null);\n    history.push(\"/\");\n  }, [setUser, history]);\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Paper className={classes.paper} elevation={5}>\n            <IconButton\n              edge=\"start\"\n              className={classes.button}\n              color=\"inherit\"\n              aria-label=\"Back to Home Page\"\n              onClick={onBackClick}\n            >\n              <BackButton />\n            </IconButton>\n            <strong className={classes.title}>Settings</strong>\n          </Paper>\n        </Grid>\n        <Grid item xs={12}>\n          <Paper className={classes.paper} elevation={5}>\n            <h4>Username : {user && user.username}</h4>\n            <p>Email : {user && user.email}</p>\n          </Paper>\n        </Grid>\n        <Grid item xs={12}>\n          <Paper className={classes.paper} elevation={3}>\n            <List>\n              <ListItem\n                button\n                className={classes.listItem}\n                onClick={handleAccountSettingsClick}\n              >\n                <ListItemIcon>\n                  <AccountIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Account Settings\" />\n                {accountSettingsOpen ? <ExpandLess /> : <ExpandMore />}\n              </ListItem>\n              <Collapse in={accountSettingsOpen} timeout=\"auto\" unmountOnExit>\n                <List component=\"div\" disablePadding>\n                  <ListItem button className={classes.nested}>\n                    <ListItemText primary=\"Edit Account\" />\n                  </ListItem>\n                  <ListItem button className={classes.nested}>\n                    <ListItemText primary=\"Delete Account\" />\n                  </ListItem>\n                </List>\n              </Collapse>\n              <ListItem\n                button\n                className={classes.listItem}\n                onClick={handleChatSettingsClick}\n              >\n                <ListItemIcon>\n                  <ChatIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Chat Settings\" />\n                {chatSettingsOpen ? <ExpandLess /> : <ExpandMore />}\n              </ListItem>\n              <Collapse in={chatSettingsOpen} timeout=\"auto\" unmountOnExit>\n                <List component=\"div\" disablePadding>\n                  <ListItem button className={classes.nested}>\n                    <ListItemText primary=\"Export Chat History\" />\n                  </ListItem>\n                  <ListItem button className={classes.nested}>\n                    <ListItemText primary=\"Delete Chat History\" />\n                  </ListItem>\n                </List>\n              </Collapse>\n              <ListItem\n                button\n                className={classes.listItem}\n                onClick={() => {\n                  history.push(\"/legal\");\n                }}\n              >\n                <ListItemIcon>\n                  <HelpIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Terms and Conditions\" />\n              </ListItem>\n            </List>\n          </Paper>\n        </Grid>\n        <Grid item xs={12}>\n          <Paper className={`${classes.paper} ${classes.logOut}`} elevation={5}>\n            <Button\n              onClick={onSignOut}\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n              Sign Out\n            </Button>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport produce from 'immer';\n\nexport const ChatContext = React.createContext(null);\n\nexport function init() {\n  // reducer returns updated state and an eventual effect.\n  // inspired by how Elm handles effects:\n  // https://guide.elm-lang.org/effects/http.html\n  return {\n    state: {\n      socket: io(),\n      channels: [],\n      whoIsTyping: [],\n      chatMessages: [],\n      typingTimeout: undefined,\n      currentChannel: undefined,\n      isTyping: false,\n      contentShouldScrollDown: false,\n      channelFetchError: false,\n    },\n    performEffect: dispatch => {\n      dispatch({ type: 'fetch-channels' });\n    },\n  };\n}\n\n/* eslint-disable no-param-reassign */\nfunction chatReducer(prev, action) {\n  const prevState = prev.state;\n\n  return produce(prev, draft => {\n    const { payload } = action;\n    const { socket } = draft.state;\n\n    draft.state.contentShouldScrollDown = false;\n    draft.performEffect = undefined;\n\n    // eslint-disable-next-line default-case\n    switch (action.type) {\n      // get a list of all channels a user can join\n      case 'fetch-channels':\n        draft.state.channelFetchError = false;\n\n        draft.performEffect = dispatch => {\n          axios\n            .get('/api/chat-channels')\n            .then(response => response.data.chatChannels)\n            .then(channels =>\n              dispatch({ type: 'set-channels', payload: { channels } }),\n            )\n            .catch(() => dispatch({ type: 'channel-list-fetch-error' }));\n        };\n        break;\n\n      // after fetch-channels: set the list of channels\n      case 'set-channels':\n        draft.state.channels = payload.channels;\n        break;\n\n      // after fetch-channels: update state after fetch error\n      case 'channel-list-fetch-error':\n        draft.state.channelFetchError = true;\n        break;\n\n      // user chooses a channel from the sidebar\n      case 'change-channel':\n        if (!socket) {\n          break;\n        }\n\n        Object.assign(draft.state, {\n          message: '',\n          isTyping: false,\n          typingTimeout: undefined,\n          currentChannel:\n            draft.state.currentChannel &&\n            draft.state.currentChannel._id === payload.channel._id\n              ? undefined\n              : payload.channel,\n          chatMessages: [],\n          whoIsTyping: [],\n        });\n\n        draft.performEffect = () => {\n          clearTimeout(prevState.typingTimeout);\n          socket.emit('join channel', payload.channel._id);\n\n          if (prevState.currentChannel) {\n            socket.emit('stop typing', {\n              username: payload.user.username,\n              channelId: prevState.currentChannel._id,\n            });\n\n            socket.emit('leave channel', prevState.currentChannel._id);\n          }\n        };\n\n        break;\n\n      // user starts typing on text message input. emit \"user is\n      // typing\" message and start a timeout that will remove \"user\n      // is typing\" message\n      case 'start-typing':\n        if (!socket) {\n          break;\n        }\n\n        draft.state.isTyping = true;\n\n        draft.performEffect = dispatch => {\n          dispatch({\n            type: 'set-typing-timeout',\n            payload: {\n              timeout: setTimeout(() => {\n                dispatch({\n                  type: 'stop-typing',\n                  payload: { user: payload.user },\n                });\n              }, 4000),\n            },\n          });\n\n          if (!prevState.isTyping) {\n            socket.emit('start typing', {\n              username: payload.user.username,\n              channelId: prevState.currentChannel._id,\n            });\n          }\n\n          clearTimeout(prevState.typingTimeout);\n        };\n\n        break;\n\n      // this action is used to perform setTimeout without making a\n      // side effect on state update\n      case 'set-typing-timeout':\n        draft.state.typingTimeout = payload.timeout;\n        break;\n\n      // after timeout: emit \"stop typing\" to all users.\n      case 'stop-typing':\n        if (!socket) {\n          break;\n        }\n\n        draft.state.isTyping = false;\n\n        draft.performEffect = () => {\n          clearTimeout(prevState.typingTimeout);\n\n          socket.emit('stop typing', {\n            username: payload.user.username,\n            channelId: prevState.currentChannel._id,\n          });\n        };\n\n        break;\n\n      // send a chat message to users in the channel. this will also\n      // save the same message to the database\n      case 'send-message':\n        if (!socket || !payload.message) {\n          break;\n        }\n\n        draft.state.isTyping = false;\n\n        draft.performEffect = () => {\n          clearTimeout(prevState.typingTimeout);\n\n          socket.emit('chat message', {\n            user: payload.user,\n            message: payload.message,\n            channelId: prevState.currentChannel._id,\n          });\n\n          socket.emit('stop typing', {\n            username: payload.user.username,\n            channelId: prevState.currentChannel._id,\n          });\n        };\n\n        break;\n\n      // action used when joining channel and on a new message\n      case 'scroll-chat-to-bottom':\n        draft.state.contentShouldScrollDown = true;\n        break;\n\n      // add live message recieved to the current state. this is okay\n      // since messages that are stale (not recieved through\n      // websocket) are fetched from the database instead.\n      case 'recieve-message':\n        draft.state.chatMessages.push(payload.chatMessage);\n        draft.state.contentShouldScrollDown = true;\n        break;\n\n      // add user to the \"user is typing\" section\n      case 'add-user-typing':\n        draft.state.whoIsTyping.push(payload.username);\n        break;\n\n      // remove user to the \"user is typing\" section\n      case 'remove-user-typing': {\n        const index = prevState.whoIsTyping.indexOf(payload.username);\n\n        if (index !== -1) {\n          draft.state.whoIsTyping.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  });\n}\n/* eslint-enable no-param-reassign */\n\nexport default chatReducer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { ChatContext } from '../reducer';\nimport { UserContext } from '#/Provider';\n\nconst textareaStyle = { maxHeight: '16em' };\n\nfunction MessageTextArea({ messageInputRef }) {\n  const [, dispatch] = React.useContext(ChatContext);\n  const [user] = React.useContext(UserContext);\n\n  const handleSubmit = React.useCallback(\n    event => {\n      event.preventDefault();\n\n      dispatch({\n        type: 'send-message',\n        payload: { user, message: messageInputRef.current.value.trim() },\n      });\n\n      // eslint-disable-next-line no-param-reassign\n      messageInputRef.current.value = '';\n    },\n    [dispatch, user, messageInputRef],\n  );\n\n  const handleMessageKeyDown = React.useCallback(\n    event => {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        handleSubmit(event);\n      }\n    },\n    [handleSubmit],\n  );\n\n  const handleMessageChange = React.useCallback(() => {\n    dispatch({ type: 'start-typing', payload: { user } });\n  }, [dispatch, user]);\n\n  React.useEffect(() => {\n    const inputElem = messageInputRef.current;\n\n    if (inputElem) {\n      inputElem.style.height = 'auto'; // shrink before growing\n      inputElem.style.height = `${inputElem.scrollHeight}px`;\n    }\n  });\n\n  return (\n    <form className=\"flex flex-grow mr-4\" onSubmit={handleSubmit}>\n      <label className=\"w-full flex items-center\" htmlFor=\"message-input\">\n        <div className=\"sr-only\">Send a message</div>\n        <textarea\n          className={[\n            'bg-gray-200',\n            'w-full',\n            'placeholder-gray-800',\n            'resize-none',\n            'outline-none',\n            'overflow-y-auto',\n            'overflow-x-hidden',\n            'px-3',\n            'py-2',\n            'rounded-l-lg',\n          ].join(' ')}\n          style={textareaStyle}\n          id=\"message-input\"\n          rows=\"1\"\n          placeholder=\"Send a message\"\n          onChange={handleMessageChange}\n          onKeyDown={handleMessageKeyDown}\n          autoComplete=\"off\"\n          ref={messageInputRef}\n        />\n      </label>\n    </form>\n  );\n}\n\nMessageTextArea.propTypes = {\n  messageInputRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.any }),\n  ]),\n};\n\nMessageTextArea.defaultProps = {\n  messageInputRef: React.createRef(),\n};\n\nexport default React.memo(MessageTextArea);\n","import React from 'react';\n\nfunction EmotionHappyIcon(props) {\n  return (\n    <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" {...props}>\n      <path d=\"M12 22a10 10 0 1 1 0-20 10 10 0 0 1 0 20zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16zm-3.54-4.46a1 1 0 0 1 1.42-1.42 3 3 0 0 0 4.24 0 1 1 0 0 1 1.42 1.42 5 5 0 0 1-7.08 0zM9 11a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm6 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2z\" />\n    </svg>\n  );\n}\n\nexport default EmotionHappyIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as R from 'ramda';\nimport useEffectOnce from '#/hooks/useEffectOnce';\n\nfunction PopupMenu({ bgClassName, children, onClose, isOpen }) {\n  useEffectOnce(() => {\n    // handling escape key is from a video (8:45):\n    // https://tailwindcss.com/course/making-the-dropdown-interactive/\n    function handleEscapeKey(event) {\n      if (event.key === 'Esc' || event.key === 'Escape') {\n        onClose(event);\n      }\n    }\n\n    document.addEventListener('keydown', handleEscapeKey);\n    return () => document.removeEventListener('keydown', handleEscapeKey);\n  });\n\n  return (\n    <div className={isOpen ? '' : 'invisible'}>\n      <button\n        type=\"button\"\n        className={`fixed inset-0 w-full h-full cursor-default z-40 ${bgClassName}`}\n        onClick={onClose}\n        aria-label=\"Close menu\"\n        tabIndex=\"-1\"\n      />\n      <div className=\"relative z-50\">{children}</div>\n    </div>\n  );\n}\n\nPopupMenu.propTypes = {\n  bgClassName: PropTypes.string,\n  children: PropTypes.node,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nPopupMenu.defaultProps = {\n  bgClassName: '',\n  children: null,\n  onClose: R.always(),\n  isOpen: false,\n};\n\nexport default PopupMenu;\n","import React, { Fragment } from 'react';\nimport uuidv4 from 'uuid/v4';\nimport * as R from 'ramda';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport MessageTextArea from './MessageTextArea';\nimport { ChatContext } from '../reducer';\nimport EmotionHappyIcon from '#/icons/EmotionHappyIcon';\nimport PopupMenu from '#/components/popup-menu';\nimport { theme } from '#/../utils';\nimport './message-input-area.css';\n\nfunction MessageInputArea() {\n  const [state] = React.useContext(ChatContext);\n  const [emojiMenuOpen, setEmojiMenuOpen] = React.useState(false);\n  const messageInputRef = React.useRef(null);\n\n  const handleBackgroundClick = React.useCallback(() => {\n    setEmojiMenuOpen(false);\n  }, []);\n\n  const handleEmojiMenuButton = React.useCallback(() => {\n    setEmojiMenuOpen(R.not);\n  }, []);\n\n  const handleEmojiClick = React.useCallback(\n    emoji => {\n      messageInputRef.current.value += emoji.native;\n    },\n    [messageInputRef],\n  );\n\n  const displayWhoIsTyping = React.useMemo(\n    () =>\n      R.compose(\n        R.cond([\n          [R.isEmpty, () => <>&nbsp;</>],\n          [xs => xs.length === 1, person => <>{person} is typing...</>],\n          // (length + 1) / 2 counts the number of users typing since\n          // the array contains users as well as a string in between.\n          // [<>user1</>, \" and \", <>user2</>]\n          [xs => (xs.length + 1) / 2 <= 3, users => <>{users} are typing...</>],\n          [R.T, () => 'Several people are typing...'],\n        ]),\n        R.map(node => <Fragment key={uuidv4()}>{node}</Fragment>),\n        R.intersperse(' and '),\n        R.map(username => <span className=\"font-bold\">{username}</span>),\n      )(state.whoIsTyping),\n    [state.whoIsTyping],\n  );\n\n  return (\n    <div className=\"mt-6 mb-1 mx-6\">\n      <div className=\"flex items-center -mb-1\">\n        <div className=\"rounded-lg bg-gray-200 flex w-full\">\n          <MessageTextArea messageInputRef={messageInputRef} />\n          <button\n            className=\"px-2 text-gray-600 hover:text-gray-700\"\n            type=\"button\"\n            onClick={handleEmojiMenuButton}\n          >\n            <EmotionHappyIcon className=\"fill-current\" />\n          </button>\n          <PopupMenu onClose={handleBackgroundClick} isOpen={emojiMenuOpen}>\n            <div className=\"absolute right-0 bottom-0 mb-12 shadow-md\">\n              <Picker\n                set=\"google\"\n                emoji=\"\"\n                title=\"\"\n                onSelect={handleEmojiClick}\n                color={theme.colors.blue[500]}\n              />\n            </div>\n          </PopupMenu>\n        </div>\n      </div>\n      <div className=\"ml-2 text-gray-700 mt-1\">{displayWhoIsTyping}</div>\n    </div>\n  );\n}\n\nexport default React.memo(MessageInputArea);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DateTime } from 'luxon';\nimport * as R from 'ramda';\nimport useEffectOnce from '#/hooks/useEffectOnce';\n\nfunction ChatMessage({ message }) {\n  const isSafeToUpdate = React.useRef(true);\n  const [whenMessageWasSent, setWhenMessageWasSent] = React.useState(null);\n  const [shouldRecalculateTime, setShouldRecalculateTime] = React.useState(\n    true,\n  );\n\n  const recalculateTimeInAMinute = React.useCallback(() => {\n    setTimeout(() => {\n      if (isSafeToUpdate.current) {\n        setShouldRecalculateTime(true);\n      }\n    }, 60 * 1000);\n  }, [setShouldRecalculateTime]);\n\n  React.useEffect(() => {\n    if (shouldRecalculateTime) {\n      setShouldRecalculateTime(false);\n\n      const sent = DateTime.fromISO(message.sent);\n\n      const minutesSinceSend = DateTime.local()\n        .diff(sent, 'minutes')\n        .toObject().minutes;\n\n      R.o(\n        setWhenMessageWasSent,\n        R.cond([\n          [R.gte(1), R.o(() => 'Just now', recalculateTimeInAMinute)],\n          [R.gte(10), R.o(() => sent.toRelative(), recalculateTimeInAMinute)],\n          [R.T, () => sent.toLocaleString(DateTime.DATETIME_MED)],\n        ]),\n      )(minutesSinceSend);\n    }\n  }, [\n    message.sent,\n    whenMessageWasSent,\n    shouldRecalculateTime,\n    recalculateTimeInAMinute,\n  ]);\n\n  useEffectOnce(() => () => {\n    isSafeToUpdate.current = false;\n  });\n\n  return (\n    <div className=\"my-3\">\n      <div>\n        <span className=\"font-bold mr-1\">\n          {message.user ? message.user.username : <>&nbsp;</>}\n        </span>\n        <span className=\"text-xs text-gray-700\">\n          <time dateTime={message.sent}>{whenMessageWasSent}</time>\n        </span>\n      </div>\n      <div className=\"whitespace-pre-line\">{message.message}</div>\n    </div>\n  );\n}\n\nChatMessage.propTypes = {\n  message: PropTypes.shape({\n    user: PropTypes.shape({\n      username: PropTypes.string,\n    }),\n    sent: PropTypes.string, // ISO date\n    message: PropTypes.string,\n  }).isRequired,\n};\n\nexport default React.memo(ChatMessage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ContentContainer({ children, direction }) {\n  return (\n    <div\n      className={`my-8 flex flex-grow bg-white rounded-lg shadow-xl ${direction}`}\n    >\n      {children}\n    </div>\n  );\n}\n\nContentContainer.propTypes = {\n  children: PropTypes.node,\n  direction: PropTypes.string,\n};\n\nContentContainer.defaultProps = {\n  children: null,\n  direction: 'flex-row',\n};\n\nexport default ContentContainer;\n","import React from \"react\";\nimport ContentContainer from \"./ContentContainer\";\nimport noChannelsImage from \"#/assets/images/undraw_messaging_app.svg\";\n\nfunction ContentNoChannel() {\n  return (\n    <ContentContainer>\n      <div className=\"relative flex flex-grow items-center overflow-hidden\">\n        {/* <img\n          className=\"absolute opacity-0 select-none right-0\"\n          alt=\"Chat Icon\"\n          src={noChannelsImage}\n        /> */}\n        <div className=\"mx-12 mb-8 z-10\">\n          <h1\n            className=\"text-5xl whitespace-normal leading-tight font-bold\"\n            style={{ fontFamily: \"Raleway, sans-serif\" }}\n          >\n            No chat selected\n          </h1>\n          <p className=\"text-gray-700 text-xl mt-4\">\n            To start chatting, join or create a group from the sidebar\n          </p>\n        </div>\n      </div>\n    </ContentContainer>\n  );\n}\n\nexport default ContentNoChannel;\n","import React from 'react';\nimport ContentContainer from './ContentContainer';\nimport styles from './content-loading.module.css';\n\nfunction ContentLoading() {\n  return (\n    <ContentContainer>\n      <div className=\"flex flex-grow justify-center items-center\">\n        <h1 className=\"text-2xl text-gray-700\">Loading...</h1>\n        <div\n          className={`w-48 h-48 flex justify-center items-center ${\n            styles['spinner-parent']\n          }`}\n        >\n          <div\n            className={`rounded-full w-20 h-20 bg-blue-200 ${styles.spinner}`}\n          />\n        </div>\n      </div>\n    </ContentContainer>\n  );\n}\n\nexport default ContentLoading;\n","import React from 'react';\nimport ContentContainer from './ContentContainer';\nimport channelErrorImage from '#/assets/images/undraw_lost.svg';\n\nfunction ContentError() {\n  return (\n    <ContentContainer>\n      <div className=\"flex flex-col items-center justify-center\">\n        <div className=\"ml-8\">\n          <h1\n            className=\"text-5xl whitespace-normal leading-tight font-bold\"\n            style={{ fontFamily: 'Raleway, sans-serif' }}\n          >\n            A server error has occurred.\n          </h1>\n          <p className=\"text-gray-700 text-xl mt-2 mb-5\">\n            Please try again later\n          </p>\n        </div>\n        <img\n          className=\"w-3/5\"\n          alt=\"Man looking at map\"\n          src={channelErrorImage}\n        />\n      </div>\n    </ContentContainer>\n  );\n}\n\nexport default ContentError;\n","import React from 'react';\n\nfunction ChatIcon(props) {\n  return (\n    <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" {...props}>\n      <path d=\"M6 14H4a2 2 0 0 1-2-2V4c0-1.1.9-2 2-2h12a2 2 0 0 1 2 2v2h2a2 2 0 0 1 2 2v13a1 1 0 0 1-1.7.7L16.58 18H8a2 2 0 0 1-2-2v-2zm0-2V8c0-1.1.9-2 2-2h8V4H4v8h2zm14-4H8v8h9a1 1 0 0 1 .7.3l2.3 2.29V8z\" />\n    </svg>\n  );\n}\n\nexport default ChatIcon;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { ChatContext } from \"../reducer\";\nimport MessageInputArea from \"./MessageInputArea\";\nimport ChatMessage from \"./ChatMessage\";\nimport ContentNoChannel from \"./ContentNoChannel\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentError from \"./ContentError\";\nimport ContentContainer from \"./ContentContainer\";\nimport ChatIcon from \"#/icons/ChatIcon\";\n\nfunction ChatContent() {\n  const [state, dispatch] = React.useContext(ChatContext);\n  // either chatchannel or error object\n  const [channelData, setChannelData] = React.useState(undefined);\n  // reference to messages container. it's used to set scroll position\n  const chatMessagesRef = React.useRef(null);\n\n  React.useEffect(() => {\n    if (state.contentShouldScrollDown && chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [state.contentShouldScrollDown]);\n\n  React.useEffect(() => {\n    setChannelData(undefined);\n\n    // if a channel is selected, fetch the channel data.\n    if (state.currentChannel) {\n      axios\n        .get(`/api/chat-channels/${state.currentChannel._id}?limit=9999`)\n        .then((response) => response.data)\n        .then((data) => data.chatChannel)\n        .then(setChannelData)\n        .then(() => dispatch({ type: \"scroll-chat-to-bottom\" }))\n        .catch(() => setChannelData(new Error(\"A server error has occurred.\")));\n    }\n  }, [state.currentChannel, dispatch]);\n\n  if (!state.currentChannel) {\n    return <ContentNoChannel />;\n  }\n\n  if (!channelData) {\n    return <ContentLoading />;\n  }\n\n  if (channelData instanceof Error) {\n    return <ContentError />;\n  }\n\n  return (\n    <ContentContainer direction=\"flex-col\">\n      <div className=\"mt-4 mb-1 mx-6\">\n        <h1 className=\"text-xl font-bold text-gray-900\">\n          <ChatIcon className=\"fill-current inline mr-4 text-gray-700\" />\n          {channelData.name}\n        </h1>\n      </div>\n      <hr />\n      <div className=\"flex-grow px-6 overflow-y-scroll\" ref={chatMessagesRef}>\n        <div className=\"relative\">\n          <div className=\"absolute py-4 w-full break-words pr-24\">\n            {channelData.messages &&\n              channelData.messages.map((chatMessage) => (\n                <ChatMessage key={chatMessage._id} message={chatMessage} />\n              ))}\n            {state.chatMessages.map((chatMessage) => (\n              <ChatMessage key={chatMessage._id} message={chatMessage} />\n            ))}\n          </div>\n        </div>\n      </div>\n      <hr />\n      <MessageInputArea />\n    </ContentContainer>\n  );\n}\n\nexport default React.memo(ChatContent);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as R from \"ramda\";\nimport { ChatContext } from \"../reducer\";\nimport { UserContext } from \"#/Provider\";\n\nfunction SidebarChannelButton({ channel, groupType }) {\n  const [state, dispatch] = React.useContext(ChatContext);\n  const [user] = React.useContext(UserContext);\n\n  const changeChannel = React.useCallback(\n    () => dispatch({ type: \"change-channel\", payload: { channel, user } }),\n    [dispatch, user, channel]\n  );\n\n  return groupType === 0 ? (\n    <button\n      className={`block w-full text-left p-1 pl-4 rounded-lg truncate font-bold ${\n        state.currentChannel && state.currentChannel._id === channel._id\n          ? \"text-blue-700 hover:text-blue-900 bg-blue-100\"\n          : \"hover:text-gray-900 hover:bg-gray-200\"\n      }`}\n      type=\"button\"\n      onClick={state.fetchingChannel ? R.always() : changeChannel}\n    >\n      {channel.name}\n    </button>\n  ) : groupType === 1 && channel.groupType === 1 ? (\n    <button\n      className={`block w-full text-left p-1 pl-4 rounded-lg truncate font-bold ${\n        state.currentChannel && state.currentChannel._id === channel._id\n          ? \"text-blue-700 hover:text-blue-900 bg-blue-100\"\n          : \"hover:text-gray-900 hover:bg-gray-200\"\n      }`}\n      type=\"button\"\n      onClick={state.fetchingChannel ? R.always() : changeChannel}\n    >\n      {channel.name}\n    </button>\n  ) : groupType === 2 && channel.groupType === 2 ? (\n    <button\n      className={`block w-full text-left p-1 pl-4 rounded-lg truncate font-bold ${\n        state.currentChannel && state.currentChannel._id === channel._id\n          ? \"text-blue-700 hover:text-blue-900 bg-blue-100\"\n          : \"hover:text-gray-900 hover:bg-gray-200\"\n      }`}\n      type=\"button\"\n      onClick={state.fetchingChannel ? R.always() : changeChannel}\n    >\n      {channel.name}\n    </button>\n  ) : (\n    <></>\n  );\n}\n\nSidebarChannelButton.propTypes = {\n  channel: PropTypes.shape({\n    _id: PropTypes.string,\n    name: PropTypes.string,\n    groupType: PropTypes.number,\n  }).isRequired,\n};\n\nexport default React.memo(SidebarChannelButton);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as R from 'ramda';\nimport PopupMenu from '#/components/popup-menu';\n\nfunction Modal({ bgClassName, onClose, isOpen, children }) {\n  return (\n    <PopupMenu bgClassName={bgClassName} onClose={onClose} isOpen={isOpen}>\n      <div className=\"fixed w-screen h-screen inset-0 pointer-events-none\">\n        <div className=\"flex w-screen h-screen items-center justify-center\">\n          <div className=\"pointer-events-auto\">{children}</div>\n        </div>\n      </div>\n    </PopupMenu>\n  );\n}\n\nModal.propTypes = {\n  bgClassName: PropTypes.string,\n  children: PropTypes.node,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nModal.defaultProps = {\n  bgClassName: 'bg-gray-900 opacity-25',\n  children: null,\n  onClose: R.always(),\n  isOpen: false,\n};\n\nexport default Modal;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useForm from \"react-hook-form\";\nimport axios from \"axios\";\nimport * as R from \"ramda\";\nimport { ChatContext } from \"../reducer\";\nimport Modal from \"#/components/modal\";\nimport Input from \"#/components/input\";\nimport Button from \"#/components/button\";\nimport { UserContext } from \"#/Provider\";\nimport { handleRequestValidationError } from \"#/../utils\";\n\nfunction NewChannelModal({ isOpen, onClose }) {\n  const [, dispatch] = React.useContext(ChatContext);\n  const form = useForm();\n  const [user] = React.useContext(UserContext);\n\n  const handleNewChannelSubmit = React.useCallback(\n    (data) => {\n      if (!user) {\n        return;\n      }\n\n      axios\n        .post(\"/api/chat-channels\", data, {\n          headers: { Authorization: user.token },\n        })\n        .then(onClose)\n        .then(() => form.setValue(\"name\", \"\"))\n        .then(() => form.clearError())\n        .then(() => dispatch({ type: \"fetch-channels\" }))\n        .catch(handleRequestValidationError(form));\n    },\n    [user, onClose, form, dispatch]\n  );\n\n  return (\n    <Modal onClose={onClose} isOpen={isOpen}>\n      <form\n        className=\"shadow-lg\"\n        onSubmit={form.handleSubmit(handleNewChannelSubmit)}\n        style={{ width: 400 }}\n      >\n        <div className=\"p-8 pb-4 bg-white rounded-t border-solid border-blue-500 border-t-4\">\n          <h1 className=\"text-3xl font-light mb-4\">Create a Chat</h1>\n          <label htmlFor=\"add-channel-input\">\n            <div className=\"sr-only\">Chat Name</div>\n            <Input\n              className=\"w-full\"\n              id=\"add-channel-input\"\n              name=\"name\"\n              placeholder=\"Enter Chat Name\"\n              ref={form.register({ required: \"Please enter a channel name\" })}\n            />\n          </label>\n          <span className=\"text-xs text-red-700 ml-1\">\n            {form.errors.name ? form.errors.name.message : <>&nbsp;</>}\n          </span>\n        </div>\n        <div className=\"p-6 text-right bg-gray-100 rounded-b\">\n          <Button\n            className=\"bg-gray-100 hover:bg-gray-200 text-gray-900 shadow-none hover:shadow-none\"\n            type=\"button\"\n            onClick={onClose}\n            overrideColors\n          >\n            Cancel\n          </Button>\n          <Button\n            className=\"ml-4 bg-blue-700 hover:bg-blue-800 text-gray-100\"\n            type=\"submit\"\n            overrideColors\n          >\n            Create\n          </Button>\n        </div>\n      </form>\n    </Modal>\n  );\n}\n\nNewChannelModal.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n};\n\nNewChannelModal.defaultProps = {\n  isOpen: false,\n  onClose: R.always(),\n};\n\nexport default React.memo(NewChannelModal);\n","import React from 'react';\n\nfunction PlusIcon(props) {\n  return (\n    <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" {...props}>\n      <path d=\"M17 11a1 1 0 0 1 0 2h-4v4a1 1 0 0 1-2 0v-4H7a1 1 0 0 1 0-2h4V7a1 1 0 0 1 2 0v4h4z\" />\n    </svg>\n  );\n}\n\nexport default PlusIcon;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useHistory } from \"react-router-dom\";\nimport * as R from \"ramda\";\nimport SidebarChannelButton from \"./SidebarChannelButton\";\nimport NewChannelModal from \"./NewChannelModal\";\n// import { UserContext } from \"#/Provider\";\nimport PopupMenu from \"#/components/popup-menu\";\nimport UserIcon from \"#/icons/UserIcon\";\nimport PlusIcon from \"#/icons/PlusIcon\";\n\nfunction ChatChannelSidebar({ channels, groupType }) {\n  // const [user, setUser] = React.useContext(UserContext);\n  // modal visibilty state for adding a new channel\n  const [newChannelMenuOpen, setNewChannelMenuOpen] = React.useState(false);\n  // menu visibilty state when user clicks on their username\n  const [userMenuOpen, setUserMenuOpen] = React.useState(false);\n  const history = useHistory();\n\n  // close menu when user clicks outside of menu\n  const handleBackgroundClick = React.useCallback(() => {\n    setNewChannelMenuOpen(false);\n    // setUserMenuOpen(false);\n  }, []);\n\n  const handleNewChannelMenuClick = React.useCallback(() => {\n    setNewChannelMenuOpen(R.not);\n  }, []);\n\n  const handleUserButtonClick = React.useCallback(() => {\n    setUserMenuOpen(R.not);\n  }, []);\n\n  // remove user from localStorage and go to homepage\n  // const handleSignoutClick = React.useCallback(() => {\n  //   setUser(null);\n  //   history.push(\"/\");\n  // }, [setUser, history]);\n\n  return (\n    <div className=\"max-h-screen-85 w-64 px-2 mr-4 mt-16 overflow-y-auto\">\n      <div className=\"relative\">\n        <div className=\"absolute w-full py-12\">\n          {/* <button\n            className=\"w-full hover:bg-gray-200 rounded-lg p-1 pl-2\"\n            type=\"button\"\n            onClick={handleUserButtonClick}\n          >\n            <div className=\"flex items-center\">\n              <UserIcon className=\"fill-current text-gray-600\" />\n              <span className=\"ml-4 font-bold text-lg text-gray-900\">\n                {user && user.username}\n              </span>\n            </div>\n          </button>\n          <PopupMenu onClose={handleBackgroundClick} isOpen={userMenuOpen}>\n            <div className=\"absolute mt-2 bg-white rounded py-4 shadow-md\">\n              <button\n                className=\"px-8 py-1 hover:bg-blue-100 hover:text-blue-700\"\n                type=\"button\"\n                onClick={handleSignoutClick}\n              >\n                Sign out\n              </button>\n            </div>\n          </PopupMenu> */}\n          <div className=\"text-gray-700 font-bold\">\n            <div className=\"mb-2 uppercase tracking-wide text-xs\">Chats</div>\n            <div className=\"w-full\">\n              {channels.map((channel) => (\n                <SidebarChannelButton\n                  key={channel._id}\n                  channel={channel}\n                  groupType={groupType}\n                />\n              ))}\n            </div>\n            <div className=\"mt-8\">\n              <button\n                type=\"button\"\n                className=\"block w-full flex items-center rounded-lg hover:bg-gray-200 text-gray-700 hover:text-gray-900 p-1\"\n                onClick={handleNewChannelMenuClick}\n              >\n                <PlusIcon className=\"fill-current text-gray-600 mr-1\" />\n                New Chat\n              </button>\n              <div className=\"font-normal\">\n                <NewChannelModal\n                  isOpen={newChannelMenuOpen}\n                  onClose={handleBackgroundClick}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nChatChannelSidebar.propTypes = {\n  channels: PropTypes.arrayOf(\n    PropTypes.shape({\n      _id: PropTypes.string,\n      name: PropTypes.string,\n    })\n  ),\n};\n\nChatChannelSidebar.defaultProps = {\n  channels: [],\n};\n\nexport default React.memo(ChatChannelSidebar);\n","import React, { useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n    position: \"fixed\",\n    width: \"100%\",\n    backgroundColor: \"rgba(155,255,155,1)\",\n    borderRadius: 0,\n  },\n});\n\nconst TabView = ({ groupType, setGroupType }) => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  useEffect(() => {\n    setGroupType(value);\n  }, [value]);\n  return (\n    <Paper className={classes.root} elevation={5}>\n      <Tabs\n        value={value}\n        onChange={handleChange}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        centered\n      >\n        <Tab label=\"ALL\" value={0} />\n        <Tab label=\"OFFICIAL\" value={1} />\n        <Tab label=\"UNOFFICIAL\" value={2} />\n      </Tabs>\n    </Paper>\n  );\n};\nexport { TabView };\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport ProfileIcon from \"@material-ui/icons/Person\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  list: {\n    width: \"20em\",\n    marginTop: theme.spacing(14),\n  },\n  drawer: {\n    flexShrink: 0,\n  },\n  avatar: {\n    backgroundColor: \"green\",\n  },\n}));\n\nconst SideDrawer = ({ drawerOpen, setDrawerOpen }) => {\n  const history = useHistory();\n  const closeDrawer = () => {\n    setDrawerOpen(!drawerOpen);\n  };\n\n  const classes = useStyles();\n\n  const onHomeClick = () => {\n    history.push(\"/\");\n    // window.location.reload(false);\n  };\n  const onProfileClick = () => {\n    history.push(\"/settings\");\n    // window.location.reload(false);\n  };\n\n  return (\n    <React.Fragment>\n      <Drawer\n        anchor={\"right\"}\n        open={drawerOpen}\n        onClose={closeDrawer}\n        className={classes.drawer}\n      >\n        <List className={classes.list}>\n          <ListItem button onClick={onHomeClick}>\n            <ListItemAvatar>\n              <Avatar className={classes.avatar}>\n                <HomeIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary=\"Home\" />\n          </ListItem>\n          <ListItem button onClick={onProfileClick}>\n            <ListItemAvatar>\n              <Avatar className={classes.avatar}>\n                <ProfileIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary=\"Profile\" />\n          </ListItem>\n          <ListItem button>\n            <ListItemAvatar>\n              <Avatar className={classes.avatar}>\n                <HelpIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary=\"Help\" />\n          </ListItem>\n        </List>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n\nexport default SideDrawer;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n// import SearchIcon from \"@material-ui/icons/Search\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { TabView } from \"./tabs\";\n// import Logo from \"../../assets/icons/Logo.svg\";\nimport { IconButton } from \"@material-ui/core\";\nimport SideDrawer from \"./drawer\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  toolbar: {\n    display: \"flex\",\n    [theme.breakpoints.down(\"xs\")]: {\n      alignSelf: \"center\",\n    },\n  },\n\n  button: {\n    display: \"none\",\n\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\",\n      marginRight: theme.spacing(2),\n    },\n  },\n\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function AppBarView({ groupType, setGroupType }) {\n  const classes = useStyles();\n\n  const [drawerOpen, setDrawerOpen] = useState(false);\n\n  const toggleDrawer = () => {\n    setDrawerOpen(!drawerOpen);\n  };\n  const onSearchClick = () => {\n    console.log(\"search button clicked\");\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar className={classes.toolbar}>\n          {/* <img src={Logo} alt=\"\" height={70} /> */}\n          <Typography variant=\"h5\" className={classes.title}>\n            CO-convo-EP\n          </Typography>\n          {/* <IconButton\n            edge=\"start\"\n            className={classes.button}\n            color=\"inherit\"\n            aria-label=\"Search Page\"\n            onClick={onSearchClick}\n          >\n            <SearchIcon />\n          </IconButton> */}\n          <IconButton\n            edge=\"start\"\n            className={classes.button}\n            color=\"inherit\"\n            aria-label=\"Settings Page\"\n            onClick={toggleDrawer}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Toolbar>\n        <div>\n          <TabView groupType={groupType} setGroupType={setGroupType} />\n        </div>\n      </AppBar>\n      <SideDrawer drawerOpen={drawerOpen} setDrawerOpen={setDrawerOpen} />\n    </div>\n  );\n}\n","const TreeItems = {\n  id: \"1\",\n  blockName: \"convo\",\n  children: [\n    {\n      id: \"11\",\n      blockName: \"CS\",\n      children: [\n        {\n          id: \"608729ddd980e17e8cf25a3a\",\n          blockName: \"Honors\",\n          children: [],\n        },\n        {\n          id: \"111\",\n          blockName: \"Div2\",\n          children: [\n            {\n              id: \"1111\",\n              blockName: \"OS\",\n              children: [\n                {\n                  id: \"608729e5d980e17e8cf25a3b\",\n                  blockName: \"OS Class\",\n                  children: [],\n                },\n                {\n                  id: \"608729edd980e17e8cf25a3c\",\n                  blockName: \"OS BatchGroup\",\n                  children: [],\n                },\n              ],\n            },\n            {\n              id: \"608729f5d980e17e8cf25a3d\",\n              blockName: \"AC\",\n              children: [],\n            },\n            {\n              id: \"1112\",\n              blockName: \"SE\",\n              children: [\n                {\n                  id: \"608729fbd980e17e8cf25a3e\",\n                  blockName: \"SE Class\",\n                  children: [],\n                },\n                {\n                  id: \"60872a03d980e17e8cf25a3f\",\n                  blockName: \"SE BatchGroup\",\n                  children: [],\n                },\n              ],\n            },\n            {\n              id: \"1113\",\n              blockName: \"DS\",\n              children: [\n                {\n                  id: \"60872a0cd980e17e8cf25a40\",\n                  blockName: \"DS Class\",\n                  children: [],\n                },\n                {\n                  id: \"60872a15d980e17e8cf25a41\",\n                  blockName: \"DS BatchGroup\",\n                  children: [],\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: \"60872a27d980e17e8cf25a43\",\n      blockName: \"iloe\",\n      children: [],\n    },\n  ],\n};\n\nexport default TreeItems;\n","import { Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { useState } from \"react\";\nimport * as R from \"ramda\";\n\nimport { ChatContext } from \"../../routes/chat/reducer\";\nimport { UserContext } from \"#/Provider\";\nimport PropTypes from \"prop-types\";\n\nimport TreeItems from \"./data\";\nimport \"./treeView.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  parentButton: {\n    fontSize: 16,\n    padding: \"25px 40px\",\n    marginLeft: 5,\n    marginBottom: theme.spacing(4),\n    border: \"1px solid\",\n    lineHeight: 1.5,\n    backgroundColor: \"#0063cc\",\n    borderColor: \"#0063cc\",\n  },\n  childButton: {\n    fontSize: 16,\n    minWidth: \"15vw\",\n    maxWidth: \"50%\",\n    padding: \"25px 15px\",\n    margin: theme.spacing(4),\n    marginLeft: theme.spacing(16),\n    border: \"1px solid\",\n    lineHeight: 1.5,\n    backgroundColor: \"#0063cc\",\n    borderColor: \"#0063cc\",\n  },\n  treeViewContainer: {\n    marginTop: theme.spacing(20),\n    marginLeft: theme.spacing(3.5),\n    [theme.breakpoints.down(\"xs\")]: {\n      marginBottom: theme.spacing(10),\n    },\n  },\n}));\n\nconst TreeView = ({ channels, groupType, setTreeViewVisible }) => {\n  const [state, dispatch] = React.useContext(ChatContext);\n  const [user] = React.useContext(UserContext);\n  const [parent, setParent] = useState(TreeItems);\n\n  const changeChannel = React.useCallback(\n    () => dispatch({ type: \"change-channel\", payload: { channels, user } }),\n    [dispatch, user, channels]\n  );\n\n  const [backTrackArray, updateBackTrackArray] = useState([]);\n\n  const onChildClick = (parent, child) => {\n    if (child[\"children\"].length !== 0) {\n      backTrackArray.push(parent);\n      updateBackTrackArray(backTrackArray);\n      setParent(child);\n    } else {\n      // console.log(\"Open Chatbox\", child.id);\n      const channel = channels.find((temp) => temp._id === child.id);\n      setTreeViewVisible(false);\n      // console.log(channel);\n      dispatch({ type: \"change-channel\", payload: { channel, user } }),\n        [dispatch, user, channel];\n      // changeChannel(channel);\n      // state.fetchingChannel ? R.always() : changeChannel;\n    }\n  };\n\n  const onParentClick = () => {\n    if (backTrackArray.length !== 0) {\n      setParent(backTrackArray.pop());\n    }\n  };\n\n  const classes = useStyles();\n  return (\n    <div className={classes.treeViewContainer}>\n      <Button\n        variant=\"contained\"\n        className={classes.parentButton}\n        onClick={() => onParentClick()}\n      >\n        {parent[\"blockName\"]}\n      </Button>\n      {parent[\"children\"].map((children) => (\n        <div>\n          <div className=\"children\">\n            <Button\n              variant=\"contained\"\n              className={classes.childButton}\n              onClick={() => onChildClick(parent, children)}\n            >\n              {children[\"blockName\"]}\n            </Button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nTreeView.propTypes = {\n  channels: PropTypes.shape({\n    _id: PropTypes.string,\n    name: PropTypes.string,\n    groupType: PropTypes.number,\n  }).isRequired,\n};\n\nexport default React.memo(TreeView);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Fab from \"@material-ui/core/Fab\";\nimport TreeIcon from \"@material-ui/icons/AccountTree\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"fixed\",\n    [theme.breakpoints.down(\"xs\")]: {\n      bottom: theme.spacing(10),\n      right: theme.spacing(2),\n    },\n    [theme.breakpoints.up(\"sm\")]: {\n      bottom: theme.spacing(10),\n      left: theme.spacing(1),\n    },\n  },\n}));\n\nconst FAB = ({ treeViewVisible, setTreeViewVisible }) => {\n  const classes = useStyles();\n\n  const handleClick = () => {\n    setTreeViewVisible(!treeViewVisible);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Fab color=\"primary\" aria-label=\"add\" onClick={handleClick}>\n        <TreeIcon />\n      </Fab>\n    </div>\n  );\n};\n\nexport default FAB;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ChatContent from \"./chat-content/ChatContent\";\nimport ChatChannelSidebar from \"./sidebar/ChatChannelSidebar\";\nimport chatReducer, { ChatContext, init } from \"./reducer\";\nimport { UserContext } from \"#/Provider\";\nimport useEffectOnce from \"#/hooks/useEffectOnce\";\nimport AppBarView from \"./appBar/appBar\";\nimport TreeView from \"../treeView/treeView\";\nimport FAB from \"../treeView/floatingActionButton\";\n\nfunction Chat() {\n  const [{ state, performEffect }, dispatch] = React.useReducer(\n    chatReducer,\n    undefined,\n    init\n  );\n  const history = useHistory();\n  const [user] = React.useContext(UserContext);\n\n  // subscribe to socket emit events\n  useEffectOnce(() => {\n    const { socket } = state;\n\n    // handle chat messages\n    socket.on(\"chat message\", (chatMessage) =>\n      dispatch({ type: \"recieve-message\", payload: { chatMessage } })\n    );\n\n    // handle \"user is typing\"\n    socket.on(\"start typing\", (username) =>\n      dispatch({ type: \"add-user-typing\", payload: { username } })\n    );\n\n    // remove \"user is typing\"\n    socket.on(\"stop typing\", (username) =>\n      dispatch({ type: \"remove-user-typing\", payload: { username } })\n    );\n\n    return socket.close.bind(socket);\n  });\n\n  // go to login page if user is logged out\n  useEffectOnce(() => {\n    if (!user) {\n      history.replace(\"/login\");\n    }\n  }, [history, user]);\n\n  // perform side effect after state update\n  React.useEffect(() => {\n    if (performEffect) {\n      performEffect(dispatch);\n    }\n  }, [dispatch, performEffect]);\n\n  const chatContextValue = React.useMemo(() => [state, dispatch], [state]);\n\n  const [treeViewVisible, setTreeViewVisible] = useState(false);\n\n  const [groupType, setGroupType] = useState(0);\n\n  return (\n    <div>\n      <AppBarView groupType={groupType} setGroupType={setGroupType} />\n      <ChatContext.Provider value={chatContextValue}>\n        <div className=\"flex\">\n          <ChatChannelSidebar channels={state.channels} groupType={groupType} />\n\n          <div className=\"h-screen-85 mt-20 mr-4 flex flex-grow\">\n            {treeViewVisible ? (\n              <TreeView\n                setTreeViewVisible={setTreeViewVisible}\n                channels={state.channels}\n                groupType={groupType}\n              />\n            ) : (\n              <ChatContent />\n            )}\n          </div>\n        </div>\n        <FAB\n          treeViewVisible={treeViewVisible}\n          setTreeViewVisible={setTreeViewVisible}\n        />\n      </ChatContext.Provider>\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from 'react';\n\n// useEffect, but only on mount\nfunction useEffectOnce(fn) {\n  React.useEffect(fn, []);\n  return null;\n}\n\nexport default useEffectOnce;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst classes = 'rounded focus:shadow-outline cursor-pointer';\nconst colors = 'bg-blue-700 hover:bg-gray-800 text-gray-100';\n\nfunction Button({\n  className,\n  children,\n  type,\n  overrideColors,\n  variant,\n  ...rest\n}) {\n  let classVariants;\n\n  if (variant === 'big') {\n    classVariants = 'px-12 py-4 font-bold shadow-md hover:shadow-lg';\n  } else {\n    classVariants = 'px-4 py-2 shadow hover:shadow-md';\n  }\n\n  return (\n    // eslint-disable-next-line react/button-has-type\n    <button\n      className={`\n        ${overrideColors ? '' : colors}\n        ${classes} ${classVariants} ${className}\n      `}\n      type={type}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  type: PropTypes.string,\n  variant: PropTypes.oneOf(['big', undefined]),\n  overrideColors: PropTypes.bool,\n};\n\nButton.defaultProps = {\n  className: '',\n  children: null,\n  type: 'button',\n  variant: undefined,\n  overrideColors: false,\n};\n\nexport default Button;\n","const { validationResult } = require('express-validator');\nconst R = require('ramda');\n// https://tailwindcss.com/docs/configuration/#referencing-in-javascript\nconst resolveConfig = require('tailwindcss/resolveConfig');\nconst tailwindConfig = require('./tailwind.config');\n\nconst { theme } = resolveConfig(tailwindConfig);\n\n/*\n  console.log, but it returns the value that was passed in. This\n  function is useful for inspecting the value in a promise chain, or\n  when composing functions.\n\n  usage:\n    Promise.resolve(5)\n      .then(inspect) // prints 5\n      .then(five => doSomething(five))\n      .then(inspect) // prints return value of doSomething\n*/\nfunction inspect(x) {\n  console.log(x); // eslint-disable-line no-console\n  return x;\n}\n\n/*\n  check if an object has a value for every key passed in.\n\n  usage:\n    hasProps(['foo', 'bar'], { foo: 10, bar: 20 }) === true\n    hasProps(['foo', 'bar'], { bar: 20, baz: 30 }) === false\n*/\nconst hasProps = R.curry((props, obj) =>\n  R.compose(R.all(R.identity), R.values, R.pickAll(props))(obj),\n);\n\n// middleware for express validation\n// any validation errors are sent to client\nfunction handleValidation(req, res, next) {\n  const errors = validationResult(req);\n\n  if (errors.isEmpty()) {\n    next();\n  } else {\n    res.status(400).json({ errors: errors.mapped() });\n  }\n}\n\nconst handleRequestValidationError = R.curry((form, error) => {\n  const paramErrors = error.response.data.errors;\n\n  if (!paramErrors) {\n    throw error;\n  }\n\n  R.forEachObjIndexed((value, key) => {\n    form.setError(key, 'paramError', value && value.msg);\n  }, paramErrors);\n});\n\nmodule.exports = {\n  theme,\n  inspect,\n  hasProps,\n  handleValidation,\n  handleRequestValidationError,\n};\n"],"sourceRoot":""}